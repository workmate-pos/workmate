query getProduct($id: ID!) {
  product(id: $id) {
    ...ProductFragment
  }
}

query get($id: ID!) {
  productVariant(id: $id) {
    ...ProductVariantFragment
  }
}

query getPage(
  $first: Int = 10,
  $after: String,
  $query: String,
) {
  productVariants(first: $first, after: $after, query: $query, sortKey: POPULAR) {
    nodes {
      ...ProductVariantFragment
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}

query getMany($ids: [ID!]!) {
  nodes(ids: $ids) {
    __typename
    id
    ...ProductVariantFragment
  }
}

query getManyProductsForDatabase($ids: [ID!]!) {
  nodes(ids: $ids) {
    __typename
    ...DatabaseProductFragment
  }
}

query getManyProductVariantsForDatabase($ids: [ID!]!) {
  nodes(ids: $ids) {
    __typename
    ...DatabaseProductVariantFragment
  }
}

query getManyInventoryItems($ids: [ID!]!) {
  nodes(ids: $ids) {
    __typename
    ... on ProductVariant {
      id
      inventoryItem {
        id
      }
    }
  }
}

fragment ProductVariantFragment on ProductVariant {
  id
  title
  sku
  price
  barcode
  image {
    url
  }
  inventoryItem {
    id
    unitCost {
      currencyCode
      amount
    }
  }
  product {
    ...ProductFragment
  }
  requiresComponents
  defaultCharges: metafield(namespace: "$app", key: "default-charges") {
    id
    references(first: 10) {
      nodes {
        __typename
        ...FixedPriceLabourChargeFragment
        ...HourlyLabourChargeFragment
      }
      pageInfo {
        hasNextPage
        endCursor
      }
    }
  }
}

fragment ProductFragment on Product {
  id
  title
  handle
  hasOnlyDefaultVariant
  descriptionHtml
  featuredImage {
    url
  }
  tags
  description
  productType
  serviceType: metafield(namespace: "$app", key: "service-type") {
    id
    value
  }
}

query getProductVariantComponents($id: ID!) {
  productVariant(id: $id) {
    productVariantComponents(first: 25) {
      nodes {
        quantity
        productVariant {
          ...ProductVariantFragment
        }
      }
      pageInfo {
        hasNextPage
        endCursor
      }
    }
  }
}

fragment FixedPriceLabourChargeFragment on Metaobject {
  id
  type
  name: field(key: "name") {
    value
  }
  amount: field(key: "amount") {
    value
  }
  customizeAmount: field(key: "customize-amount") {
    value
  }
  removable: field(key: "removable") {
    value
  }
}

fragment HourlyLabourChargeFragment on Metaobject {
  id
  type
  name: field(key: "name") {
    value
  }
  rate: field(key: "rate") {
    value
  }
  hours: field(key: "hours") {
    value
  }
  customizeRate: field(key: "customize-rate") {
    value
  }
  customizeHours: field(key: "customize-hours") {
    value
  }
  removable: field(key: "removable") {
    value
  }
}

mutation create($input: ProductInput!) {
  productCreate(input: $input) {
    userErrors {
      message
      field
    }
    product {
      id
      variants(first: 1) {
        nodes {
          ...ProductVariantFragment
        }
      }
    }
  }
}

fragment DatabaseProductFragment on Product {
  id
  handle
  title
  description
  productType
}


fragment DatabaseProductVariantFragment on ProductVariant {
  id
  sku
  title
  product {
    id
  }
  inventoryItem {
    id
  }
}

mutation updateVariant($input: ProductVariantInput!) {
  productVariantUpdate(input: $input) {
    productVariant {
      ...ProductVariantFragment
    }
    userErrors {
      field
      message
    }
  }
}

mutation updateProduct($input: ProductInput!) {
  productUpdate(input: $input) {
    product {
      id
    }
    userErrors {
      field
      message
    }
  }
}
