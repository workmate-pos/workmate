query get($id: ID!) {
  order(id: $id) {
    __typename
    ...OrderInfoFragment
  }
}

query getMany($ids: [ID!]!) {
  nodes(ids: $ids) {
    __typename
    ...OrderInfoFragment
  }
}

query getManyForDatabase($ids: [ID!]!) {
  nodes(ids: $ids) {
    __typename
    ...DatabaseShopifyOrderFragment
  }
}

query getLineItemsForDatabase($orderId: ID!, $first: Int = 25) {
  order(id: $orderId) {
    lineItems(first: $first) {
      nodes {
        ...DatabaseShopifyOrderLineItemFragment
      }
      pageInfo {
        hasNextPage
        endCursor
      }
    }
  }
}

fragment ShopMoneyAmountFragment on MoneyBag {
  shopMoney {
    amount
  }
}

query getLineItems(
  $id: ID!,
  $after: String,
  $first: Int = 25,
  $fixedServiceCollectionId: ID = "gid://shopify/Collection/null",
  $mutableServiceCollectionId: ID = "gid://shopify/Collection/null"
) {
  order(id: $id) {
    lineItems(first: $first, after: $after) {
      nodes {
        ... on LineItem {
          id
          title
          taxable
          variant {
            id
            image {
              url
            }
            title
            product {
              id
              title
              hasOnlyDefaultVariant
              featuredImage {
                url
              }
              isFixedServiceItem: inCollection(id: $fixedServiceCollectionId)
              isMutableServiceItem: inCollection(id: $mutableServiceCollectionId)
            }
          }
          quantity
          originalUnitPrice
          sku
          customAttributes {
            key
            value
          }
        }
      }
      pageInfo {
        hasNextPage
        endCursor
      }
    }
  }
}

query getPage($first: Int = 10, $after: String, $query: String) {
  orders(first: $first, after: $after, query: $query, sortKey: CREATED_AT, reverse: true) {
    nodes {
      ...OrderInfoFragment
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}

fragment OrderInfoFragment on Order {
  id
  name
  note
  totalDiscountsSet {
    ...ShopMoneyAmountFragment
  }
  totalTaxSet {
    ...ShopMoneyAmountFragment
  }
  totalReceivedSet {
    ...ShopMoneyAmountFragment
  }
  currentTotalPriceSet {
    ...ShopMoneyAmountFragment
  }
  totalOutstandingSet {
    ...ShopMoneyAmountFragment
  }
  customer {
    id
    displayName
  }
  displayFulfillmentStatus
  displayFinancialStatus
  customAttributes {
    key
    value
  }
}

mutation update($input: OrderInput!) {
  orderUpdate(input: $input) {
    order {
      id
    }
    userErrors {
      ...UserErrorFragment
    }
  }
}

fragment UserErrorFragment on UserError {
  field
  message
}

fragment DatabaseShopifyOrderFragment on Order {
  id
  name
  customer {
    id
  }
  currentSubtotalPriceSet {
    ...ShopMoneyAmountFragment
  }
  currentCartDiscountAmountSet {
    ...ShopMoneyAmountFragment
  }
  currentTotalPriceSet {
    ...ShopMoneyAmountFragment
  }
  totalOutstandingSet {
    ...ShopMoneyAmountFragment
  }
  customAttributes {
    key
    value
  }
  fullyPaid
}

fragment DatabaseShopifyOrderLineItemFragment on LineItem {
  id
  title
  variant {
    id
  }
  quantity: currentQuantity
  unfulfilledQuantity
  originalUnitPriceSet {
    ...ShopMoneyAmountFragment
  }
  discountedUnitPriceSet {
    ...ShopMoneyAmountFragment
  }
  taxLines {
    priceSet {
      ...ShopMoneyAmountFragment
    }
  }
  customAttributes {
    key
    value
  }
}

mutation updateCustomAttributes($id: ID!, $customAttributes: [AttributeInput!]!) {
  orderUpdate(input: {id: $id, customAttributes: $customAttributes}) {
    userErrors {
      field
      message
    }
  }
}

query getFulfillmentOrders($id: ID!) {
  order(id: $id) {
    fulfillmentOrders(first: 250) {
      nodes {
        id
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}
