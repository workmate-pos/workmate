// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ShopifySession {
  id               String    @id
  shop             String
  state            String
  isOnline         Boolean
  scope            String?
  expires          DateTime?
  onlineAccessInfo String?
  accessToken      String?
}

model Settings {
  shop  String
  key   String
  value String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@id([shop, key])
}

model WorkOrder {
  id Int @id @default(autoincrement())

  shop String
  name String // E.g. WO-#1

  status       String
  dueDate      DateTime
  note         String
  internalNote String

  productVariantSerial   ProductVariantSerial? @relation(fields: [productVariantSerialId], references: [id])
  productVariantSerialId Int?

  customer   Customer? @relation(fields: [customerId], references: [customerId])
  customerId String

  // Location where the work order was created
  locationId String?

  companyId         String?
  companyContactId  String?
  companyLocationId String?

  paymentTermsTemplateId String?
  // Only applicable for FIXED terms
  paymentFixedDueDate    DateTime?

  derivedFromOrder   ShopifyOrder? @relation(fields: [derivedFromOrderId], references: [orderId])
  derivedFromOrderId String?

  // The discount that is applied to every FUTURE order

  discountType   DiscountType?
  // Either an absolute amount, or a percentage (range 0-100)
  discountAmount String?

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  items            WorkOrderItem[]
  charges          WorkOrderCharge[]
  customFields     WorkOrderCustomField[]
  itemCustomFields WorkOrderItemCustomField[]
  tasks            TaskWorkOrderLink[]

  @@unique([shop, name])
  @@index([shop, locationId])
  @@index([shop, customerId])
  @@index([shop, status])
}

enum DiscountType {
  FIXED_AMOUNT
  PERCENTAGE
}

model WorkOrderItem {
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId Int

  uuid String @db.Uuid

  // If this line item is paid, then this work order item is paid.
  // Can also be set to a draft order line item in case there has not been a check out for this line item yet.
  shopifyOrderLineItem   ShopifyOrderLineItem? @relation(fields: [shopifyOrderLineItemId], references: [lineItemId], onDelete: SetNull)
  shopifyOrderLineItemId String?

  data Json @db.JsonB

  charges      WorkOrderCharge[]
  customFields WorkOrderItemCustomField[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@id([workOrderId, uuid])
  @@index([shopifyOrderLineItemId])
}

model WorkOrderCharge {
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId Int

  uuid String @db.Uuid

  // If this line item is paid, then this work order item is paid.
  // Can also be set to a draft order line item in case there has not been a check out for this line item yet.
  shopifyOrderLineItem   ShopifyOrderLineItem? @relation(fields: [shopifyOrderLineItemId], references: [lineItemId], onDelete: SetNull)
  shopifyOrderLineItemId String?

  // Only set when this charge is added to some work order item.
  workOrderItem     WorkOrderItem? @relation(fields: [workOrderId, workOrderItemUuid], references: [workOrderId, uuid])
  workOrderItemUuid String?        @db.Uuid

  data Json @db.JsonB

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@id([workOrderId, uuid])
  @@index([shopifyOrderLineItemId])
}

// TODO: rethink whether we want this in the database or whether to store parts of info in the database (eg instead of having lineitem table, have lineitemid+orderid+ordername)
model ShopifyOrder {
  orderId String @id

  shop      String
  orderType ShopifyOrderType

  name      String
  lineItems ShopifyOrderLineItem[]

  customer   Customer? @relation(fields: [customerId], references: [customerId])
  customerId String?

  total       String
  // Before taxes and discounts
  subtotal    String
  // Order-level discount amount
  discount    String
  outstanding String
  fullyPaid   Boolean

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  workOrders WorkOrder[]
  discounts  ShopifyOrderDiscount[]

  @@index([shop])
}

model ShopifyOrderDiscount {
  id Int @id @default(autoincrement())

  orderId String
  order   ShopifyOrder @relation(fields: [orderId], references: [orderId])

  code   String
  amount String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
}

model ShopifyOrderLineItem {
  lineItemId String @id

  order   ShopifyOrder @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  orderId String

  productVariantId String?
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [productVariantId])

  title               String
  quantity            Int
  unfulfilledQuantity Int
  discountedUnitPrice String // after all discounts, including order-level (proportionally distributed)
  unitPrice           String // before tax/discounts
  totalTax            String // for all quantities

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  workOrderItems        WorkOrderItem[]
  workOrderCharges      WorkOrderCharge[]
  specialOrderLineItems SpecialOrderLineItem[]

  @@index([orderId])
}

// We track the source of line item quantity. Sources can be POs, TOs, or directly from inventory.
model ShopifyOrderLineItemReservation {
  lineItemId String @id
  locationId String
  quantity   Int

  @@index([locationId])
}

enum ShopifyOrderType {
  ORDER
  DRAFT_ORDER
}

model Employee {
  staffMemberId String @id

  shop String

  superuser   Boolean
  role        String
  // TODO: Remove (cannot do it right now because app migration must run first)
  permissions PermissionNode[]
  rate        String?
  email       String

  name        String
  isShopOwner Boolean

  purchaseOrderEmployeeAssignments PurchaseOrderEmployeeAssignment[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  locations EmployeeLocation[]
  defaultLocationId String?

  @@index([shop, staffMemberId])
}

model EmployeeLocation {
  id Int @id @default(autoincrement())

  staffMemberId String
  employee      Employee @relation(fields: [staffMemberId], references: [staffMemberId])

  locationId String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@index([staffMemberId])
  @@index([locationId])
}

// TODO: Remove (cannot do it right now because app migration must run first)
enum PermissionNode {
  read_settings
  write_settings
  read_employees
  write_employees
  read_work_orders
  write_work_orders
  read_app_plan
  write_app_plan
  read_purchase_orders
  write_purchase_orders
  cycle_count
  read_stock_transfers
  write_stock_transfers
  read_special_orders
  write_special_orders
  manage_schedules
}

model AppPlanSubscription {
  appSubscriptionShopifyId String
  shop                     String   @id
  appSubscriptionStatus    String
  appPlanId                Int
  updatedAt                DateTime @default(now()) @db.Timestamptz(3)
  appPlan                  AppPlan  @relation(fields: [appPlanId], references: [id], onDelete: Cascade)
}

model AppPlanSubscriptionTrials {
  shop      String   @id
  createdAt DateTime @default(now()) @db.Timestamptz(3)
}

model AppPlan {
  id Int @id @default(autoincrement())

  name     AppPlanName
  type     AppPlanType
  interval AppPlanInterval

  allowedShopifyPlans ShopifyPlan[]

  basePrice    Int
  currencyCode String

  extraLocationPrices Int[]
  maxLocations        Int?

  /// Whether this app plan is only available as a trial. Useful when trial plans differ from full plans.
  trialOnly Boolean
  trialDays Int

  createdAt            DateTime              @default(now()) @db.Timestamptz(3)
  appPlanSubscriptions AppPlanSubscription[]
  appPlanCustomAccess  AppPlanCustomAccess[]
}

model AppPlanCustomAccess {
  appPlanId Int
  shop      String
  type      AppPlanCustomAccessType

  appPlan AppPlan @relation(fields: [appPlanId], references: [id], onDelete: Cascade)

  @@id([appPlanId, shop])
}

enum AppPlanCustomAccessType {
  DEFAULT
  TEST
}

enum AppPlanName {
  FREE
  ESSENTIAL
  ENTERPRISE
}

enum ShopifyPlan {
  SHOPIFY_PLUS_PARTNER_SANDBOX
  PARTNER_DEVELOPMENT
  ADVANCED_SHOPIFY
  SHOPIFY_STARTER
  BASIC_SHOPIFY
  SHOPIFY_PLUS
  DEVELOPMENT
  SHOPIFY
  TRIAL
  STAFF
}

enum AppPlanType {
  DEFAULT
  CUSTOM
}

enum AppPlanInterval {
  EVERY_30_DAYS
  ANNUAL
}

model PurchaseOrder {
  id Int @id @default(autoincrement())

  shop String

  shipFrom String
  shipTo   String

  location   Location? @relation(fields: [locationId], references: [locationId])
  locationId String?

  vendorName String?

  note       String
  /// The date the purchase order was placed.
  placedDate DateTime? @db.Timestamptz(3)

  discount  String?
  tax       String?
  shipping  String?
  deposited String?
  paid      String?

  /// Shop specific name
  name   String
  status String

  lineItems           PurchaseOrderLineItem[]
  customFields        PurchaseOrderCustomField[]
  employeeAssignments PurchaseOrderEmployeeAssignment[]

  createdAt                         DateTime                           @default(now()) @db.Timestamptz(3)
  updatedAt                         DateTime                           @default(now()) @db.Timestamptz(3)
  purchaseOrderLineItemCustomFields PurchaseOrderLineItemCustomField[]
  tasks                             TaskPurchaseOrderLink[]
  receiptLineItems                  PurchaseOrderReceiptLineItem[]
  receipts                          PurchaseOrderReceipt[]

  @@unique([shop, name])
}

enum PurchaseOrderReceiptStatus {
  DRAFT
  ARCHIVED
  COMPLETED
}

// A receipt is a collection of line items that have arrived, e.g. a shipment.
// They are immutable after creation.
// All quantities are added as "available" inventory in Shopify once added to a receipt.
model PurchaseOrderReceipt {
  id Int @id @default(autoincrement())

  shop        String
  name        String
  description String
  status      PurchaseOrderReceiptStatus

  purchaseOrderId Int
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])

  receivedAt DateTime @db.Timestamptz(3)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  lineItems PurchaseOrderReceiptLineItem[]

  @@unique([shop, name])
}

model PurchaseOrderReceiptLineItem {
  id Int @id @default(autoincrement())

  quantity Int

  purchaseOrderReceipt   PurchaseOrderReceipt @relation(fields: [purchaseOrderReceiptId], references: [id])
  purchaseOrderReceiptId Int

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int

  lineItemUuid String                @db.Uuid
  lineItem     PurchaseOrderLineItem @relation(fields: [purchaseOrderId, lineItemUuid], references: [purchaseOrderId, uuid])

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
}

// TODO: Add serial PK to all tables like this instead of composite PK (remove all @relation with more than 1 field)
model PurchaseOrderLineItem {
  uuid String @db.Uuid

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int

  specialOrderLineItem   SpecialOrderLineItem? @relation(fields: [specialOrderLineItemId], references: [id], onDelete: Cascade)
  specialOrderLineItemId Int?

  productVariant   ProductVariant @relation(fields: [productVariantId], references: [productVariantId])
  productVariantId String

  productVariantSerial   ProductVariantSerial? @relation(fields: [productVariantSerialId], references: [id])
  productVariantSerialId Int?

  unitCost String
  quantity Int

  createdAt              DateTime                           @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime                           @default(now()) @db.Timestamptz(3)
  customFields           PurchaseOrderLineItemCustomField[]
  stockTransferLineItems StockTransferLineItem[]
  receiptLineItems       PurchaseOrderReceiptLineItem[]

  @@id([purchaseOrderId, uuid])
  @@index([purchaseOrderId])
}

model PurchaseOrderEmployeeAssignment {
  id Int @id @default(autoincrement())

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int

  employee   Employee @relation(fields: [employeeId], references: [staffMemberId])
  employeeId String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
}

model StockTransfer {
  id Int @id @default(autoincrement())

  shop String
  name String

  fromLocationId String
  toLocationId   String

  note String

  lineItems StockTransferLineItem[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  tasks TaskStockTransferLink[]

  @@unique([shop, name])
}

enum StockTransferLineItemStatus {
  PENDING
  IN_TRANSIT
  RECEIVED
  REJECTED
}

model StockTransferLineItem {
  uuid String @db.Uuid

  stockTransfer   StockTransfer @relation(fields: [stockTransferId], references: [id])
  stockTransferId Int

  inventoryItemId     String
  // Store titles in case the inventory item id is deleted/etc.
  // TODO: Do this everywhere instead of syncing?
  productTitle        String
  productVariantTitle String

  // The status of this line item. Line item can be split to have different statuses.
  status StockTransferLineItemStatus

  // The SO line item that this stock transfer line item will fulfill
  shopifyOrderLineItemId String?
  // We require the order id as well, as the GraphQL API does not link line item to order id, only the other way around
  shopifyOrderId         String?

  // The quantity pending/sent/received/rejected depending on the status.
  // Line item is split if there are multiple statuses.
  quantity Int

  // Stock transfer line items can be linked to purchase order line items.
  // This is used for cases where a purchase order should immediatelly be shipped to a different location.
  // Linking the two allows us to determine how many items were transferred, and how many remain.
  purchaseOrderId           Int?
  purchaseOrderLineItemUuid String?                @db.Uuid
  purchaseOrderLineItem     PurchaseOrderLineItem? @relation(fields: [purchaseOrderId, purchaseOrderLineItemUuid], references: [purchaseOrderId, uuid])

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@id([stockTransferId, uuid])
}

model PurchaseOrderCustomField {
  id Int @id @default(autoincrement())

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int

  key   String
  value String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([purchaseOrderId, key])
  @@index([key, value])
}

model PurchaseOrderLineItemCustomField {
  id Int @id @default(autoincrement())

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int

  purchaseOrderLineItem     PurchaseOrderLineItem @relation(fields: [purchaseOrderId, purchaseOrderLineItemUuid], references: [purchaseOrderId, uuid])
  purchaseOrderLineItemUuid String                @db.Uuid

  key   String
  value String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([purchaseOrderId, purchaseOrderLineItemUuid, key])
  @@index([key, value])
}

model WorkOrderCustomField {
  id Int @id @default(autoincrement())

  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId Int

  key   String
  value String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([workOrderId, key])
  @@index([key, value])
}

model WorkOrderItemCustomField {
  id Int @id @default(autoincrement())

  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId Int

  workOrderItem     WorkOrderItem @relation(fields: [workOrderId, workOrderItemUuid], references: [workOrderId, uuid])
  workOrderItemUuid String        @db.Uuid

  key   String
  value String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([workOrderId, workOrderItemUuid, key])
  @@index([key, value])
}

model CustomFieldsPreset {
  id Int @id @default(autoincrement())

  type CustomFieldsPresetType

  shop String
  name String

  keys String[]

  // If default, all keys will automatically be added to a work order/purchase order (depending on the type)
  default Boolean

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([shop, type, name])
}

// Users can specify a list of options for custom field names.
// This is done on a per-name basis and (currently) spans line items, purchase orders, and work orders.
model CustomFieldValueOptions {
  id Int @id @default(autoincrement())

  shop   String
  name   String
  values String[]

  @@unique([shop, name])
}

enum CustomFieldsPresetType {
  WORK_ORDER
  PURCHASE_ORDER
  // Shared between work order line items (incl services) and purchase order line items for now.
  LINE_ITEM
}

model ProductVariant {
  productVariantId String @id

  productId String
  product   Product @relation(fields: [productId], references: [productId])

  inventoryItemId String
  sku             String?
  title           String

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @default(now()) @db.Timestamptz(3)
  deletedAt DateTime?

  purchaseOrderLineItems PurchaseOrderLineItem[]
  shopifyOrderLineItems  ShopifyOrderLineItem[]
  specialOrderLineItems  SpecialOrderLineItem[]
  productVariantSerial   ProductVariantSerial[]
}

model Product {
  productId String @id

  shop String

  handle                String
  title                 String
  description           String
  productType           String
  vendor                String
  hasOnlyDefaultVariant Boolean

  productVariants ProductVariant[]

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @default(now()) @db.Timestamptz(3)
  deletedAt DateTime?

  @@index([shop])
}

model Customer {
  customerId String @id

  shop String

  displayName String
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  address     String?

  workOrders    WorkOrder[]
  shopifyOrders ShopifyOrder[]
  specialOrders SpecialOrder[]

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @default(now()) @db.Timestamptz(3)
  deletedAt DateTime?

  @@index([shop])
}

model Location {
  locationId String @id

  shop String

  name String

  purchaseOrders PurchaseOrder[]
  specialOrders  SpecialOrder[]

  createdAt            DateTime               @default(now()) @db.Timestamptz(3)
  updatedAt            DateTime               @default(now()) @db.Timestamptz(3)
  deletedAt            DateTime?
  ProductVariantSerial ProductVariantSerial[]

  @@index([shop])
}

// Old schema stuff that needs to be re-synced into the new schema

model OldWorkOrder {
  id                 Int                   @id @default(autoincrement())
  shop               String
  name               String
  status             String
  dueDate            DateTime
  createdAt          DateTime              @default(now()) @db.Timestamptz(3)
  customerId         String
  derivedFromOrderId String?
  draftOrderId       String?
  orderId            String?
  fixedPriceLabour   OldFixedPriceLabour[]
  hourlyLabour       OldHourlyLabour[]

  @@unique([shop, name])
  @@index([draftOrderId])
  @@index([orderId])
}

model OldFixedPriceLabour {
  id               Int          @id @default(autoincrement())
  workOrderId      Int
  lineItemUuid     String?
  productVariantId String?
  employeeId       String?
  name             String
  amount           String
  workOrder        OldWorkOrder @relation(fields: [workOrderId], references: [id])

  @@index([workOrderId])
}

model OldHourlyLabour {
  id               Int          @id @default(autoincrement())
  workOrderId      Int
  lineItemUuid     String?
  productVariantId String?
  employeeId       String?
  name             String
  rate             String
  hours            String
  WorkOrder        OldWorkOrder @relation(fields: [workOrderId], references: [id])

  @@index([workOrderId])
}

model AppMigration {
  name      String             @id
  checksum  String
  status    AppMigrationStatus
  createdAt DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt DateTime           @default(now()) @db.Timestamptz(3)
}

enum AppMigrationStatus {
  PENDING
  SUCCESS
  FAILURE
}

model CycleCount {
  id Int @id @default(autoincrement())

  shop String
  name String

  status     String
  locationId String
  note       String

  // If true, nothing can be changed except for the status and note.
  // Applications are also not allowed.
  locked Boolean

  dueDate DateTime?

  items CycleCountItem[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  employees CycleCountEmployeeAssignment[]
  tasks     TaskCycleCountLink[]

  @@unique([shop, name])
  @@index([createdAt])
  @@index([dueDate])
}

model CycleCountEmployeeAssignment {
  id Int @id @default(autoincrement())

  cycleCountId Int
  cycleCount   CycleCount @relation(fields: [cycleCountId], references: [id])

  employeeId String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([cycleCountId, employeeId])
}

model CycleCountItem {
  cycleCountId Int
  cycleCount   CycleCount @relation(fields: [cycleCountId], references: [id])

  uuid String @db.Uuid

  productVariantId String
  inventoryItemId  String
  countQuantity    Int

  productTitle        String
  productVariantTitle String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  applications CycleCountItemApplication[]

  @@id([cycleCountId, uuid])
}

// We track individual applications for auditing purposes, and to allow partial cycle counts.
model CycleCountItemApplication {
  id Int @id @default(autoincrement())

  cycleCountItemUuid String         @db.Uuid
  cycleCountId       Int
  cycleCountItem     CycleCountItem @relation(fields: [cycleCountId, cycleCountItemUuid], references: [cycleCountId, uuid])

  appliedQuantity Int

  // Quantity before this application
  originalQuantity Int

  // optional GID of the staff member that applied this item
  staffMemberId String?

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
}

// General purpose table for storing counters.
// Key should be namespaced or something like that.
model Counter {
  id Int @id @default(autoincrement())

  key        String
  last_value Int

  @@unique([key])
}

// request to resupply products by some customer/company.
// links shopify orders to purchase orders.
model SpecialOrder {
  id Int @id @default(autoincrement())

  shop String
  name String

  customer   Customer? @relation(fields: [customerId], references: [customerId])
  customerId String

  locationId String
  location   Location @relation(fields: [locationId], references: [locationId])

  companyId         String?
  companyContactId  String?
  companyLocationId String?

  requiredBy DateTime?
  note       String

  lineItems SpecialOrderLineItem[]
  tasks     TaskSpecialOrderLink[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([shop, name])
}

model SpecialOrderLineItem {
  id Int @id @default(autoincrement())

  specialOrderId Int
  specialOrder   SpecialOrder @relation(fields: [specialOrderId], references: [id])

  uuid String @db.Uuid

  shopifyOrderLineItemId String?
  shopifyOrderLineItem   ShopifyOrderLineItem? @relation(fields: [shopifyOrderLineItemId], references: [lineItemId], onDelete: Cascade)

  productVariant   ProductVariant @relation(fields: [productVariantId], references: [productVariantId])
  productVariantId String

  // This quantity is not allowed to go below the PO quantity
  quantity Int

  purchaseOrderLineItems PurchaseOrderLineItem[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([specialOrderId, uuid])
}

// A unique instance of some product variant that has a serial number
model ProductVariantSerial {
  id Int @id @default(autoincrement())

  shop String

  serial String
  note   String

  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [productVariantId])

  locationId String?
  location   Location? @relation(fields: [locationId], references: [locationId])

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  purchaseOrderLineItems PurchaseOrderLineItem[]
  workOrders             WorkOrder[]
  tasks                  TaskSerialLink[]

  @@unique([shop, productVariantId, serial])
}

// Metafield cache.
// Currently used for finding product/variants by metafield values in the scanner extension.
model Metafield {
  id Int @id @default(autoincrement())

  shop String

  // The object that the metafield is attached to
  objectId    String
  metafieldId String @unique

  namespace String
  key       String
  value     String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([objectId, namespace, key])
  @@index([shop, namespace, key, value])
}

// Table used for blocking concurrent tasks and for tracking the progress of long-running tasks.
model LongRunningTask {
  id Int @id @default(autoincrement())

  name        String @unique
  progress    Int
  progressMax Int?

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
}

// Employees can mark themselves as available or unavailable for datetime ranges
// If the employee is available you can schedule them for work without any warnings.
// If the employee is unavailable you are warned but can override it.
// If no availability is set a warning is shown indicating that the employee's availability is unknown.

// In principle the app should ensure that date ranges do not overlap (i.e. by automatically merging them).
// If this is not the case, unavailability should take precedence.
model EmployeeAvailability {
  id Int @id @default(autoincrement())

  staffMemberId String
  shop          String

  description String

  available Boolean

  start DateTime @db.Timestamptz(3)
  end   DateTime @db.Timestamptz(3)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@index([shop, staffMemberId, available, start, end])
  @@index([shop, available, start, end])
  @@index([shop, available, end])
  @@index([shop, id, staffMemberId])
}

model ScheduleEvent {
  id Int @id @default(autoincrement())

  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId Int

  name        String
  description String
  // Color of the item in the schedule. Should be a hex color including the leading '#'
  color       String

  start DateTime @db.Timestamptz(3)
  end   DateTime @db.Timestamptz(3)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  tasks       ScheduleEventTask[]
  assignments ScheduleEventAssignment[]

  @@index([scheduleId])
  @@index([start, end])
  @@index([end])
}

model ScheduleEventAssignment {
  id Int @id @default(autoincrement())

  scheduleEventId Int
  scheduleEvent   ScheduleEvent @relation(fields: [scheduleEventId], references: [id])

  staffMemberId String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@index([scheduleEventId, staffMemberId])
  @@index([staffMemberId])
}

// A link between an ScheduleEvent and a Task
// A checklist item will be shown on the schedule item for each task
model ScheduleEventTask {
  id Int @id @default(autoincrement())

  scheduleEventId Int
  scheduleEvent   ScheduleEvent @relation(fields: [scheduleEventId], references: [id])

  taskId Int
  task   Task @relation(fields: [taskId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@index([scheduleEventId, taskId])
  @@index([taskId])
}

// Some task that should be done by an employee.
// Can be used for anything that needs to be scheduled, e.g. fulfilling a work order, performing a cycle count, etc.
// Essentially a checklist item.
//
// Tasks can be assigned to employees, which will cause the task to show up while scheduling too.
// Tasks are scheduled through a connection to ScheduleEvent.
// Task deadlines are also used for timely scheduling.
//
// It is not required to create elaborate task lists.
// You can simply create a single task (e.g. "Process WO-#4") and assign it to employees to take advantage
// of scheduling features.
model Task {
  id Int @id @default(autoincrement())

  shop String

  name                 String
  description          String
  estimatedTimeMinutes Int?
  deadline             DateTime? @db.Timestamptz(3)

  done Boolean

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  assignments    TaskAssignment[]
  scheduleEvents ScheduleEventTask[]
  workOrders     TaskWorkOrderLink[]
  purchaseOrders TaskPurchaseOrderLink[]
  specialOrders  TaskSpecialOrderLink[]
  stockTransfers TaskStockTransferLink[]
  cycleCounts    TaskCycleCountLink[]
  serials        TaskSerialLink[]

  @@index([shop])
}

// Tasks can be linked to work orders.
model TaskWorkOrderLink {
  id Int @id @default(autoincrement())

  taskId Int
  task   Task @relation(fields: [taskId], references: [id])

  workOrderId Int
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
}

// Tasks can be linked to purchase orders.
model TaskPurchaseOrderLink {
  id Int @id @default(autoincrement())

  taskId Int
  task   Task @relation(fields: [taskId], references: [id])

  purchaseOrderId Int
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
}

// Tasks can be linked to special orders.
model TaskSpecialOrderLink {
  id Int @id @default(autoincrement())

  taskId Int
  task   Task @relation(fields: [taskId], references: [id])

  specialOrderId Int
  specialOrder   SpecialOrder @relation(fields: [specialOrderId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
}

// Tasks can be linked to stock transfers.
model TaskStockTransferLink {
  id Int @id @default(autoincrement())

  taskId Int
  task   Task @relation(fields: [taskId], references: [id])

  stockTransferId Int
  stockTransfer   StockTransfer @relation(fields: [stockTransferId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
}

// Tasks can be linked to cycle counts.
model TaskCycleCountLink {
  id Int @id @default(autoincrement())

  taskId Int
  task   Task @relation(fields: [taskId], references: [id])

  cycleCountId Int
  cycleCount   CycleCount @relation(fields: [cycleCountId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
}

// Tasks can be linked to serials.
model TaskSerialLink {
  id Int @id @default(autoincrement())

  taskId Int
  task   Task @relation(fields: [taskId], references: [id])

  serialId Int
  serial   ProductVariantSerial @relation(fields: [serialId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
}

// Employees can be assigned to tasks.
// These assignments can be used during scheduling to ensure that employee tasks are scheduled at some time.
// Note that this is not binding/enforced, i.e. an employee can be scheduled for a task that they are not assigned to.
model TaskAssignment {
  id Int @id @default(autoincrement())

  taskId Int
  task   Task @relation(fields: [taskId], references: [id])

  staffMemberId String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@index([taskId])
  @@index([staffMemberId])
}

// Schedule items are grouped into Schedule rows.
model Schedule {
  id Int @id @default(autoincrement())

  shop String
  name String

  // Schedules can be connected to locations.
  locationId String?

  // When schedules are manually published this will be set to the current date.
  // It is also possible to set this to a future date to schedule a future date.
  // TODO: Notifications with a cronjob - should check all schedules since the last notification
  // TODO: Table that links notifs to this schedule
  publishedAt DateTime? @db.Timestamptz(3)

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  scheduleEvents ScheduleEvent[]

  @@index([shop, id])
  @@index([shop, locationId])
  @@index([shop, publishedAt])
}

model ReorderPoint {
  id Int @id @default(autoincrement())

  shop            String
  inventoryItemId String

  // The location to which the reorder point applies
  // If null, the reorder point applies to all locations that do not have an explicit reorder point
  locationId String?

  // This product variant will be reordered if its available quantity is less than this value.
  min Int
  // Re-orders will order up to this quantity.
  max Int

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([shop, locationId, inventoryItemId])
}

model InventoryQuantity {
  id Int @id @default(autoincrement())

  shop            String
  inventoryItemId String
  locationId      String

  // the name of the quantity (currently we only support 'available' because that's all that webhooks support)
  name     String
  quantity Int

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([shop, locationId, inventoryItemId, name])
}

enum InventoryMutationType {
  MOVE
  SET
  ADJUST
}

enum InventoryMutationInitiatorType {
  PURCHASE_ORDER
  PURCHASE_ORDER_RECEIPT
  STOCK_TRANSFER
  CYCLE_COUNT
  WORK_ORDER
  UNKNOWN
}

model InventoryMutation {
  id Int @id @default(autoincrement())

  shop String
  type InventoryMutationType

  initiatorType InventoryMutationInitiatorType
  initiatorName String

  // The staff member that initiated the mutation
  staffMemberId String?

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  items InventoryMutationItem[]

  @@index([shop])
}

model InventoryMutationItem {
  id Int @id @default(autoincrement())

  inventoryMutationId Int
  inventoryMutation   InventoryMutation @relation(fields: [inventoryMutationId], references: [id])

  inventoryItemId String
  name            String
  locationId      String

  // type = set
  compareQuantity Int?

  // type = set / move
  quantity Int?

  // type = adjust
  delta Int?

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
}
