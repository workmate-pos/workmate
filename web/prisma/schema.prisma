// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ShopifySession {
  id               String    @id
  shop             String
  state            String
  isOnline         Boolean
  scope            String?
  expires          DateTime?
  onlineAccessInfo String?
  accessToken      String?
}

model Settings {
  shop  String
  key   String
  value String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@id([shop, key])
}

model WorkOrder {
  id Int @id @default(autoincrement())

  shop String
  name String // E.g. WO-#1

  status       String
  dueDate      DateTime
  note         String
  internalNote String

  customer   Customer? @relation(fields: [customerId], references: [customerId])
  customerId String

  companyId         String?
  companyContactId  String?
  companyLocationId String?

  paymentTermsTemplateId String?
  // Only applicable for FIXED terms
  paymentFixedDueDate    DateTime?

  derivedFromOrder   ShopifyOrder? @relation(fields: [derivedFromOrderId], references: [orderId])
  derivedFromOrderId String?

  // The discount that is applied to every FUTURE order

  discountType   DiscountType?
  // Either an absolute amount, or a percentage (range 0-100)
  discountAmount String?

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  items            WorkOrderItem[]
  charges          WorkOrderCharge[]
  customFields     WorkOrderCustomField[]
  itemCustomFields WorkOrderItemCustomField[]

  @@unique([shop, name])
}

enum DiscountType {
  FIXED_AMOUNT
  PERCENTAGE
}

model WorkOrderItem {
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId Int

  uuid String @db.Uuid

  // If this line item is paid, then this work order item is paid.
  // Can also be set to a draft order line item in case there has not been a check out for this line item yet.
  shopifyOrderLineItem   ShopifyOrderLineItem? @relation(fields: [shopifyOrderLineItemId], references: [lineItemId], onDelete: SetNull)
  shopifyOrderLineItemId String?

  data Json @db.JsonB

  charges      WorkOrderCharge[]
  customFields WorkOrderItemCustomField[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@id([workOrderId, uuid])
  @@index([shopifyOrderLineItemId])
}

model WorkOrderCharge {
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId Int

  uuid String @db.Uuid

  // If this line item is paid, then this work order item is paid.
  // Can also be set to a draft order line item in case there has not been a check out for this line item yet.
  shopifyOrderLineItem   ShopifyOrderLineItem? @relation(fields: [shopifyOrderLineItemId], references: [lineItemId], onDelete: SetNull)
  shopifyOrderLineItemId String?

  // Only set when this charge is added to some work order item.
  workOrderItem     WorkOrderItem? @relation(fields: [workOrderId, workOrderItemUuid], references: [workOrderId, uuid])
  workOrderItemUuid String?        @db.Uuid

  data Json @db.JsonB

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@id([workOrderId, uuid])
  @@index([shopifyOrderLineItemId])
}

// TODO: rethink whether we want this in the database or whether to store parts of info in the database (eg instead of having lineitem table, have lineitemid+orderid+ordername)
model ShopifyOrder {
  orderId String @id

  shop      String
  orderType ShopifyOrderType

  name      String
  lineItems ShopifyOrderLineItem[]

  customer   Customer? @relation(fields: [customerId], references: [customerId])
  customerId String?

  total       String
  // Before taxes and discounts
  subtotal    String
  // Order-level discount amount
  discount    String
  outstanding String
  fullyPaid   Boolean

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  workOrders WorkOrder[]
  discounts  ShopifyOrderDiscount[]

  @@index([shop])
}

model ShopifyOrderDiscount {
  id Int @id @default(autoincrement())

  orderId String
  order   ShopifyOrder @relation(fields: [orderId], references: [orderId])

  code   String
  amount String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
}

model ShopifyOrderLineItem {
  lineItemId String @id

  order   ShopifyOrder @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  orderId String

  productVariantId String?
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [productVariantId])

  title               String
  quantity            Int
  unfulfilledQuantity Int
  discountedUnitPrice String // after all discounts, including order-level (proportionally distributed)
  unitPrice           String // before tax/discounts
  totalTax            String // for all quantities

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  workOrderItems        WorkOrderItem[]
  workOrderCharges      WorkOrderCharge[]
  specialOrderLineItems SpecialOrderLineItem[]

  @@index([orderId])
}

// We track the source of line item quantity. Sources can be POs, TOs, or directly from inventory.
model ShopifyOrderLineItemReservation {
  lineItemId String @id
  locationId String
  quantity   Int

  @@index([locationId])
}

enum ShopifyOrderType {
  ORDER
  DRAFT_ORDER
}

model Employee {
  staffMemberId String @id

  shop String

  superuser   Boolean
  permissions PermissionNode[]
  rate        String?
  email       String

  name        String
  isShopOwner Boolean

  purchaseOrderEmployeeAssignments PurchaseOrderEmployeeAssignment[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@index([shop])
}

enum PermissionNode {
  read_settings
  write_settings
  read_employees
  write_employees
  read_work_orders
  write_work_orders
  read_app_plan
  write_app_plan
  read_purchase_orders
  write_purchase_orders
  cycle_count
  read_stock_transfers
  write_stock_transfers
  read_special_orders
  write_special_orders
}

model AppPlanSubscription {
  appSubscriptionShopifyId String
  shop                     String   @id
  appSubscriptionStatus    String
  appPlanId                Int
  updatedAt                DateTime @default(now()) @db.Timestamptz(3)
  appPlan                  AppPlan  @relation(fields: [appPlanId], references: [id], onDelete: Cascade)
}

model AppPlanSubscriptionTrials {
  shop      String   @id
  createdAt DateTime @default(now()) @db.Timestamptz(3)
}

model AppPlan {
  id Int @id @default(autoincrement())

  name     AppPlanName
  type     AppPlanType
  interval AppPlanInterval

  allowedShopifyPlans ShopifyPlan[]

  basePrice    Int
  currencyCode String

  extraLocationPrices Int[]
  maxLocations        Int?

  /// Whether this app plan is only available as a trial. Useful when trial plans differ from full plans.
  trialOnly Boolean
  trialDays Int

  createdAt            DateTime              @default(now()) @db.Timestamptz(3)
  appPlanSubscriptions AppPlanSubscription[]
  appPlanCustomAccess  AppPlanCustomAccess[]
}

model AppPlanCustomAccess {
  appPlanId Int
  shop      String
  type      AppPlanCustomAccessType

  appPlan AppPlan @relation(fields: [appPlanId], references: [id], onDelete: Cascade)

  @@id([appPlanId, shop])
}

enum AppPlanCustomAccessType {
  DEFAULT
  TEST
}

enum AppPlanName {
  FREE
  ESSENTIAL
  ENTERPRISE
}

enum ShopifyPlan {
  SHOPIFY_PLUS_PARTNER_SANDBOX
  PARTNER_DEVELOPMENT
  ADVANCED_SHOPIFY
  SHOPIFY_STARTER
  BASIC_SHOPIFY
  SHOPIFY_PLUS
  DEVELOPMENT
  SHOPIFY
  TRIAL
  STAFF
}

enum AppPlanType {
  DEFAULT
  CUSTOM
}

enum AppPlanInterval {
  EVERY_30_DAYS
  ANNUAL
}

model PurchaseOrder {
  id Int @id @default(autoincrement())

  shop String

  shipFrom String
  shipTo   String

  location   Location? @relation(fields: [locationId], references: [locationId])
  locationId String?

  vendorName String?

  note       String
  /// The date the purchase order was placed.
  placedDate DateTime? @db.Timestamptz(3)

  discount  String?
  tax       String?
  shipping  String?
  deposited String?
  paid      String?

  /// Shop specific name
  name   String
  status String

  lineItems           PurchaseOrderLineItem[]
  customFields        PurchaseOrderCustomField[]
  employeeAssignments PurchaseOrderEmployeeAssignment[]

  createdAt                         DateTime                           @default(now()) @db.Timestamptz(3)
  updatedAt                         DateTime                           @default(now()) @db.Timestamptz(3)
  purchaseOrderLineItemCustomFields PurchaseOrderLineItemCustomField[]

  @@unique([shop, name])
}

// TODO: Add serial PK to all tables like this instead of composite PK (remove all @relation with more than 1 field)
model PurchaseOrderLineItem {
  uuid String @db.Uuid

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int

  specialOrderLineItem   SpecialOrderLineItem? @relation(fields: [specialOrderLineItemId], references: [id], onDelete: Cascade)
  specialOrderLineItemId Int?

  productVariant   ProductVariant @relation(fields: [productVariantId], references: [productVariantId])
  productVariantId String

  unitCost          String
  quantity          Int
  /// Quantity that has been added to Shopify as available inventory
  availableQuantity Int

  createdAt              DateTime                           @default(now()) @db.Timestamptz(3)
  updatedAt              DateTime                           @default(now()) @db.Timestamptz(3)
  customFields           PurchaseOrderLineItemCustomField[]
  stockTransferLineItems StockTransferLineItem[]

  @@id([purchaseOrderId, uuid])
  @@index([purchaseOrderId])
}

model PurchaseOrderEmployeeAssignment {
  id Int @id @default(autoincrement())

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int

  employee   Employee @relation(fields: [employeeId], references: [staffMemberId])
  employeeId String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)
}

model StockTransfer {
  id Int @id @default(autoincrement())

  shop String
  name String

  fromLocationId String
  toLocationId   String

  note String

  lineItems StockTransferLineItem[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([shop, name])
}

enum StockTransferLineItemStatus {
  PENDING
  IN_TRANSIT
  RECEIVED
  REJECTED
}

model StockTransferLineItem {
  uuid String @db.Uuid

  stockTransfer   StockTransfer @relation(fields: [stockTransferId], references: [id])
  stockTransferId Int

  inventoryItemId     String
  // Store titles in case the inventory item id is deleted/etc.
  // TODO: Do this everywhere instead of syncing?
  productTitle        String
  productVariantTitle String

  // The status of this line item. Line item can be split to have different statuses.
  status StockTransferLineItemStatus

  // The SO line item that this stock transfer line item will fulfill
  shopifyOrderLineItemId String?
  // We require the order id as well, as the GraphQL API does not link line item to order id, only the other way around
  shopifyOrderId         String?

  // The quantity pending/sent/received/rejected depending on the status.
  // Line item is split if there are multiple statuses.
  quantity Int

  // Stock transfer line items can be linked to purchase order line items.
  // This is used for cases where a purchase order should immediatelly be shipped to a different location.
  // Linking the two allows us to determine how many items were transferred, and how many remain.
  purchaseOrderId           Int?
  purchaseOrderLineItemUuid String?                @db.Uuid
  purchaseOrderLineItem     PurchaseOrderLineItem? @relation(fields: [purchaseOrderId, purchaseOrderLineItemUuid], references: [purchaseOrderId, uuid])

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@id([stockTransferId, uuid])
}

model PurchaseOrderCustomField {
  id Int @id @default(autoincrement())

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int

  key   String
  value String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([purchaseOrderId, key])
  @@index([key, value])
}

model PurchaseOrderLineItemCustomField {
  id Int @id @default(autoincrement())

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int

  purchaseOrderLineItem     PurchaseOrderLineItem @relation(fields: [purchaseOrderId, purchaseOrderLineItemUuid], references: [purchaseOrderId, uuid])
  purchaseOrderLineItemUuid String                @db.Uuid

  key   String
  value String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([purchaseOrderId, purchaseOrderLineItemUuid, key])
  @@index([key, value])
}

model WorkOrderCustomField {
  id Int @id @default(autoincrement())

  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId Int

  key   String
  value String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([workOrderId, key])
  @@index([key, value])
}

model WorkOrderItemCustomField {
  id Int @id @default(autoincrement())

  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId Int

  workOrderItem     WorkOrderItem @relation(fields: [workOrderId, workOrderItemUuid], references: [workOrderId, uuid])
  workOrderItemUuid String        @db.Uuid

  key   String
  value String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([workOrderId, workOrderItemUuid, key])
  @@index([key, value])
}

model CustomFieldsPreset {
  id Int @id @default(autoincrement())

  type CustomFieldsPresetType

  shop String
  name String

  keys String[]

  // If default, all keys will automatically be added to a work order/purchase order (depending on the type)
  default Boolean

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([shop, type, name])
}

// Users can specify a list of options for custom field names.
// This is done on a per-name basis and (currently) spans line items, purchase orders, and work orders.
model CustomFieldValueOptions {
  id Int @id @default(autoincrement())

  shop   String
  name   String
  values String[]

  @@unique([shop, name])
}

enum CustomFieldsPresetType {
  WORK_ORDER
  PURCHASE_ORDER
  // Shared between work order line items (incl services) and purchase order line items for now.
  LINE_ITEM
}

model ProductVariant {
  productVariantId String @id

  productId String
  product   Product @relation(fields: [productId], references: [productId])

  inventoryItemId String
  sku             String?
  title           String

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @default(now()) @db.Timestamptz(3)
  deletedAt DateTime?

  purchaseOrderLineItems PurchaseOrderLineItem[]
  shopifyOrderLineItems  ShopifyOrderLineItem[]
  specialOrderLineItems  SpecialOrderLineItem[]
}

model Product {
  productId String @id

  shop String

  handle      String
  title       String
  description String
  productType String
  vendor      String

  productVariants ProductVariant[]

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @default(now()) @db.Timestamptz(3)
  deletedAt DateTime?

  @@index([shop])
}

model Customer {
  customerId String @id

  shop String

  displayName String
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  address     String?

  workOrders    WorkOrder[]
  shopifyOrders ShopifyOrder[]
  specialOrders SpecialOrder[]

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @default(now()) @db.Timestamptz(3)
  deletedAt DateTime?

  @@index([shop])
}

model Location {
  locationId String @id

  shop String

  name String

  purchaseOrders PurchaseOrder[]
  specialOrders  SpecialOrder[]

  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @default(now()) @db.Timestamptz(3)
  deletedAt DateTime?

  @@index([shop])
}

// Old schema stuff that needs to be re-synced into the new schema

model OldWorkOrder {
  id                 Int                   @id @default(autoincrement())
  shop               String
  name               String
  status             String
  dueDate            DateTime
  createdAt          DateTime              @default(now()) @db.Timestamptz(3)
  customerId         String
  derivedFromOrderId String?
  draftOrderId       String?
  orderId            String?
  fixedPriceLabour   OldFixedPriceLabour[]
  hourlyLabour       OldHourlyLabour[]

  @@unique([shop, name])
  @@index([draftOrderId])
  @@index([orderId])
}

model OldFixedPriceLabour {
  id               Int          @id @default(autoincrement())
  workOrderId      Int
  lineItemUuid     String?
  productVariantId String?
  employeeId       String?
  name             String
  amount           String
  workOrder        OldWorkOrder @relation(fields: [workOrderId], references: [id])

  @@index([workOrderId])
}

model OldHourlyLabour {
  id               Int          @id @default(autoincrement())
  workOrderId      Int
  lineItemUuid     String?
  productVariantId String?
  employeeId       String?
  name             String
  rate             String
  hours            String
  WorkOrder        OldWorkOrder @relation(fields: [workOrderId], references: [id])

  @@index([workOrderId])
}

model AppMigration {
  name      String             @id
  checksum  String
  status    AppMigrationStatus
  createdAt DateTime           @default(now()) @db.Timestamptz(3)
  updatedAt DateTime           @default(now()) @db.Timestamptz(3)
}

enum AppMigrationStatus {
  PENDING
  SUCCESS
  FAILURE
}

// request to resupply products by some customer/company.
// links shopify orders to purchase orders.
model SpecialOrder {
  id Int @id @default(autoincrement())

  shop String
  name String

  customer   Customer? @relation(fields: [customerId], references: [customerId])
  customerId String

  locationId String
  location   Location @relation(fields: [locationId], references: [locationId])

  companyId         String?
  companyContactId  String?
  companyLocationId String?

  requiredBy DateTime?
  note       String

  lineItems SpecialOrderLineItem[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([shop, name])
}

model SpecialOrderLineItem {
  id Int @id @default(autoincrement())

  specialOrderId Int
  specialOrder   SpecialOrder @relation(fields: [specialOrderId], references: [id])

  uuid String @db.Uuid

  shopifyOrderLineItemId String?
  shopifyOrderLineItem   ShopifyOrderLineItem? @relation(fields: [shopifyOrderLineItemId], references: [lineItemId], onDelete: Cascade)

  productVariant   ProductVariant @relation(fields: [productVariantId], references: [productVariantId])
  productVariantId String

  // This quantity is not allowed to go below the PO quantity
  quantity Int

  purchaseOrderLineItems PurchaseOrderLineItem[]

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@unique([specialOrderId, uuid])
}
