// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ShopifySession {
  id               String    @id
  shop             String
  state            String
  isOnline         Boolean
  scope            String?
  expires          DateTime?
  onlineAccessInfo String?
  accessToken      String?
}

model Settings {
  shop  String
  key   String
  value String

  @@id([shop, key])
}

model WorkOrder {
  id                 Int      @id @default(autoincrement())
  shop               String
  /// Used as work order id within this shop
  name               String
  status             String
  dueDate            DateTime
  customerId         String
  /// Draft Order ID - set when the order is still being created, but not paid
  draftOrderId       String?
  /// Order ID - set when the order is paid
  orderId            String?
  derivedFromOrderId String?
  createdAt          DateTime @default(now())

  fixedPriceLabour FixedPriceLabour[]
  hourlyLabour     HourlyLabour[]

  @@unique([shop, name])
  @@index([draftOrderId])
  @@index([orderId])
}

model EmployeeRate {
  employeeId String
  shop       String
  rate       Int

  @@id([shop, employeeId])
}

model FixedPriceLabour {
  id Int @id @default(autoincrement())

  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId Int

  lineItemUuid     String?
  productVariantId String?
  employeeId       String?

  name String

  amount Int
}

// TODO: Instead of hourly, make this TimedLabour with a baseDurationMinutes field, so you can have baseDuration 15 minutes and charge for e.g. 1:15, 1:30, and 1:45 hours of work
// TODO: Then in settings have a baseDuration setting
// TODO: Then in settings always store it per hour, but allow the user to enter it for the current term (e.g. 15 minutes) and show the converted on the right
model HourlyLabour {
  id Int @id @default(autoincrement())

  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId Int

  lineItemUuid     String?
  productVariantId String?
  employeeId       String?

  name String

  rate  Int
  hours Int
}
