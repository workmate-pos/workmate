// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ShopifySession {
  id               String    @id
  shop             String
  state            String
  isOnline         Boolean
  scope            String?
  expires          DateTime?
  onlineAccessInfo String?
  accessToken      String?
}

model Settings {
  shop  String
  key   String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@id([shop, key])
}

model WorkOrder {
  id Int @id @default(autoincrement())

  shop String
  name String // E.g. WO-#1

  status  String
  dueDate DateTime
  note    String

  customer   Customer? @relation(fields: [customerId], references: [customerId])
  customerId String

  derivedFromOrder   ShopifyOrder? @relation(fields: [derivedFromOrderId], references: [orderId])
  derivedFromOrderId String?

  // The discount that is applied to every FUTURE order

  discountType   DiscountType?
  // Either an absolute amount, or a percentage (range 0-100)
  discountAmount String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  items                   WorkOrderItem[]
  fixedPriceLabourCharges WorkOrderFixedPriceLabourCharge[]
  hourlyLabourCharges     WorkOrderHourlyLabourCharge[]
  customFields            WorkOrderCustomField[]

  @@unique([shop, name])
}

enum DiscountType {
  FIXED_AMOUNT
  PERCENTAGE
}

model WorkOrderItem {
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId Int

  uuid String @db.Uuid

  // If this line item is paid, then this work order item is paid.
  // Can also be set to a draft order line item in case there has not been a check out for this line item yet.
  shopifyOrderLineItem   ShopifyOrderLineItem? @relation(fields: [shopifyOrderLineItemId], references: [lineItemId], onDelete: SetNull)
  shopifyOrderLineItemId String?

  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [productVariantId])

  /// Absorb charges means that one line item will be created for this item + all charges by changing the quantity of the line item.
  /// It is assumed that the item's price is 1.00.
  /// Quantity does not matter in this case.
  absorbCharges Boolean
  quantity      Int

  hourlyLabourCharges     WorkOrderHourlyLabourCharge[]
  fixedPriceLabourCharges WorkOrderFixedPriceLabourCharge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@id([workOrderId, uuid])
  @@index([shopifyOrderLineItemId])
}

model WorkOrderFixedPriceLabourCharge {
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId Int

  uuid String @db.Uuid

  // Only set when this charge is added to some different line item.
  workOrderItem     WorkOrderItem? @relation(fields: [workOrderId, workOrderItemUuid], references: [workOrderId, uuid])
  workOrderItemUuid String?        @db.Uuid

  shopifyOrderLineItem   ShopifyOrderLineItem? @relation(fields: [shopifyOrderLineItemId], references: [lineItemId], onDelete: SetNull)
  shopifyOrderLineItemId String?

  employee   Employee? @relation(fields: [employeeId], references: [staffMemberId])
  employeeId String?

  name   String
  amount String

  // If locked, only superusers can change it

  amountLocked Boolean
  removeLocked Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@id([workOrderId, uuid])
}

model WorkOrderHourlyLabourCharge {
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId Int

  uuid String @db.Uuid

  // Only set when this charge is added to some different line item.
  workOrderItem     WorkOrderItem? @relation(fields: [workOrderId, workOrderItemUuid], references: [workOrderId, uuid])
  workOrderItemUuid String?        @db.Uuid

  shopifyOrderLineItem   ShopifyOrderLineItem? @relation(fields: [shopifyOrderLineItemId], references: [lineItemId], onDelete: SetNull)
  shopifyOrderLineItemId String?

  employee   Employee? @relation(fields: [employeeId], references: [staffMemberId])
  employeeId String?

  name  String
  rate  String
  hours String

  // If locked, only superusers can change it

  rateLocked   Boolean
  hoursLocked  Boolean
  removeLocked Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@id([workOrderId, uuid])
}

model ShopifyOrder {
  orderId String @id

  shop      String
  orderType ShopifyOrderType

  name      String
  lineItems ShopifyOrderLineItem[]

  customer   Customer? @relation(fields: [customerId], references: [customerId])
  customerId String?

  total       String
  outstanding String
  fullyPaid   Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  workOrders WorkOrder[]

  @@index([shop])
}

model ShopifyOrderLineItem {
  lineItemId String @id

  order   ShopifyOrder @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  orderId String

  productVariantId String?
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [productVariantId])

  title               String
  quantity            Int
  unfulfilledQuantity Int
  discountedUnitPrice String // after all discounts, including order-level (proportionally distributed)
  unitPrice           String // before tax/discounts
  totalTax            String // for all quantities

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  hourlyLabourCharges     WorkOrderHourlyLabourCharge[]
  fixedPriceLabourCharges WorkOrderFixedPriceLabourCharge[]
  workOrderItems          WorkOrderItem[]
  purchaseOrderLineItems  PurchaseOrderLineItem[]

  @@index([orderId])
}

enum ShopifyOrderType {
  ORDER
  DRAFT_ORDER
}

model Employee {
  staffMemberId String @id

  shop String

  superuser   Boolean
  permissions PermissionNode[]
  rate        String?

  name        String
  isShopOwner Boolean

  hourlyLabourCharges              WorkOrderHourlyLabourCharge[]
  fixedPriceLabourCharges          WorkOrderFixedPriceLabourCharge[]
  purchaseOrderEmployeeAssignments PurchaseOrderEmployeeAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([shop])
}

enum PermissionNode {
  read_settings
  write_settings
  read_employees
  write_employees
  read_work_orders
  write_work_orders
  read_app_plan
  write_app_plan
  read_purchase_orders
  write_purchase_orders
  cycle_count
}

model AppPlanSubscription {
  appSubscriptionShopifyId String
  shop                     String   @id
  appSubscriptionStatus    String
  appPlanId                Int
  updatedAt                DateTime @default(now()) @db.Timestamptz(3)
  appPlan                  AppPlan  @relation(fields: [appPlanId], references: [id], onDelete: Cascade)
}

model AppPlanSubscriptionTrials {
  shop      String   @id
  createdAt DateTime @default(now()) @db.Timestamptz(3)
}

model AppPlan {
  id Int @id @default(autoincrement())

  name     AppPlanName
  type     AppPlanType
  interval AppPlanInterval

  allowedShopifyPlans ShopifyPlan[]

  basePrice    Int
  currencyCode String

  extraLocationPrices Int[]
  maxLocations        Int?

  /// Whether this app plan is only available as a trial. Useful when trial plans differ from full plans.
  trialOnly Boolean
  trialDays Int

  createdAt            DateTime              @default(now()) @db.Timestamptz(3)
  appPlanSubscriptions AppPlanSubscription[]
  appPlanCustomAccess  AppPlanCustomAccess[]
}

model AppPlanCustomAccess {
  appPlanId Int
  shop      String
  type      AppPlanCustomAccessType

  appPlan AppPlan @relation(fields: [appPlanId], references: [id], onDelete: Cascade)

  @@id([appPlanId, shop])
}

enum AppPlanCustomAccessType {
  DEFAULT
  TEST
}

enum AppPlanName {
  FREE
  ESSENTIAL
  ENTERPRISE
}

enum ShopifyPlan {
  SHOPIFY_PLUS_PARTNER_SANDBOX
  PARTNER_DEVELOPMENT
  ADVANCED_SHOPIFY
  BASIC_SHOPIFY
  SHOPIFY_PLUS
  DEVELOPMENT
  SHOPIFY
  STAFF
}

enum AppPlanType {
  DEFAULT
  CUSTOM
}

enum AppPlanInterval {
  EVERY_30_DAYS
  ANNUAL
}

model PurchaseOrder {
  id Int @id @default(autoincrement())

  shop String

  shipFrom String
  shipTo   String

  location   Location? @relation(fields: [locationId], references: [locationId])
  locationId String?

  vendorName String?

  note String

  discount  String?
  tax       String?
  shipping  String?
  deposited String?
  paid      String?

  /// Shop specific name
  name   String
  status String

  lineItems           PurchaseOrderLineItem[]
  customFields        PurchaseOrderCustomField[]
  employeeAssignments PurchaseOrderEmployeeAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([shop, name])
}

model PurchaseOrderLineItem {
  id Int @id @default(autoincrement())

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int

  shopifyOrderLineItem   ShopifyOrderLineItem? @relation(fields: [shopifyOrderLineItemId], references: [lineItemId], onDelete: SetNull)
  shopifyOrderLineItemId String?

  productVariant   ProductVariant @relation(fields: [productVariantId], references: [productVariantId])
  productVariantId String

  unitCost          String
  quantity          Int
  /// Quantity that is added Shopify as available inventory
  availableQuantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([purchaseOrderId])
  @@index([shopifyOrderLineItemId])
}

model PurchaseOrderEmployeeAssignment {
  id Int @id @default(autoincrement())

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int

  employee   Employee @relation(fields: [employeeId], references: [staffMemberId])
  employeeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model PurchaseOrderCustomField {
  id Int @id @default(autoincrement())

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId Int

  key   String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([purchaseOrderId, key])
  @@index([key, value])
}

model WorkOrderCustomField {
  id Int @id @default(autoincrement())

  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId Int

  key   String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([workOrderId, key])
  @@index([key, value])
}

model CustomFieldsPreset {
  id Int @id @default(autoincrement())

  type CustomFieldsPresetType

  shop String
  name String

  keys String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([shop, type, name])
}

enum CustomFieldsPresetType {
  WORK_ORDER
  PURCHASE_ORDER
}

model ProductVariant {
  productVariantId String @id

  productId String
  product   Product @relation(fields: [productId], references: [productId])

  inventoryItemId String
  sku             String?
  title           String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  purchaseOrderLineItems PurchaseOrderLineItem[]
  shopifyOrderLineItems  ShopifyOrderLineItem[]
  workOrderItems         WorkOrderItem[]
}

model Product {
  productId String @id

  shop String

  handle      String
  title       String
  description String

  productVariants ProductVariant[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  @@index([shop])
}

model Customer {
  customerId String @id

  shop String

  displayName String
  firstName   String?
  lastName    String?
  email       String?
  phone       String?
  address     String?

  workOrders    WorkOrder[]
  shopifyOrders ShopifyOrder[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  @@index([shop])
}

model Location {
  locationId String @id

  shop String

  name String

  purchaseOrders PurchaseOrder[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  @@index([shop])
}

// Old schema stuff that needs to be re-synced into the new schema

model OldWorkOrder {
  id                 Int                   @id @default(autoincrement())
  shop               String
  name               String
  status             String
  dueDate            DateTime
  createdAt          DateTime              @default(now())
  customerId         String
  derivedFromOrderId String?
  draftOrderId       String?
  orderId            String?
  fixedPriceLabour   OldFixedPriceLabour[]
  hourlyLabour       OldHourlyLabour[]

  @@unique([shop, name])
  @@index([draftOrderId])
  @@index([orderId])
}

model OldFixedPriceLabour {
  id               Int          @id @default(autoincrement())
  workOrderId      Int
  lineItemUuid     String?
  productVariantId String?
  employeeId       String?
  name             String
  amount           String
  workOrder        OldWorkOrder @relation(fields: [workOrderId], references: [id])

  @@index([workOrderId])
}

model OldHourlyLabour {
  id               Int          @id @default(autoincrement())
  workOrderId      Int
  lineItemUuid     String?
  productVariantId String?
  employeeId       String?
  name             String
  rate             String
  hours            String
  WorkOrder        OldWorkOrder @relation(fields: [workOrderId], references: [id])

  @@index([workOrderId])
}
