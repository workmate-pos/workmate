// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ShopifySession {
  id               String    @id
  shop             String
  state            String
  isOnline         Boolean
  scope            String?
  expires          DateTime?
  onlineAccessInfo String?
  accessToken      String?
}

model Settings {
  shop  String
  key   String
  value String

  @@id([shop, key])
}

model WorkOrder {
  id                 Int      @id @default(autoincrement())
  shop               String
  /// Used as work order id within this shop
  name               String
  status             String
  dueDate            DateTime
  customerId         String
  /// Draft Order ID - set when the order is still being created, but not paid
  draftOrderId       String?
  /// Order ID - set when the order is paid
  orderId            String?
  derivedFromOrderId String?
  createdAt          DateTime @default(now())

  fixedPriceLabour FixedPriceLabour[]
  hourlyLabour     HourlyLabour[]

  @@unique([shop, name])
  @@index([draftOrderId])
  @@index([orderId])
}

model Employee {
  employeeId String
  shop       String

  superuser   Boolean
  permissions PermissionNode[]
  rate        String?

  @@id([shop, employeeId])
}

enum PermissionNode {
  read_settings
  write_settings
  read_employees
  write_employees
  read_work_orders
  write_work_orders
  read_app_plan
  write_app_plan
}

model FixedPriceLabour {
  id Int @id @default(autoincrement())

  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId Int

  lineItemUuid     String?
  productVariantId String?
  employeeId       String?

  name String

  amount String
}

model HourlyLabour {
  id Int @id @default(autoincrement())

  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId Int

  lineItemUuid     String?
  productVariantId String?
  employeeId       String?

  name String

  rate  String
  hours String
}

model AppPlanSubscription {
  appSubscriptionShopifyId String
  shop                     String   @id
  appSubscriptionStatus    String
  appPlanId                Int
  updatedAt                DateTime @default(now()) @db.Timestamptz(3)
  appPlan                  AppPlan  @relation(fields: [appPlanId], references: [id], onDelete: Cascade)
}

model AppPlanSubscriptionTrials {
  shop      String   @id
  createdAt DateTime @default(now()) @db.Timestamptz(3)
}

model AppPlan {
  id                   Int                   @id @default(autoincrement())
  name                 AppPlanName
  type                 AppPlanType
  price                Int
  currencyCode         String
  interval             AppPlanInterval
  trialDays            Int
  createdAt            DateTime              @default(now()) @db.Timestamptz(3)
  appPlanSubscriptions AppPlanSubscription[]
  appPlanCustomAccess  AppPlanCustomAccess[]
}

model AppPlanCustomAccess {
  appPlanId Int
  shop      String
  appPlan   AppPlan @relation(fields: [appPlanId], references: [id], onDelete: Cascade)

  @@id([appPlanId, shop])
}

enum AppPlanName {
  STARTER
  BASIC
  PREMIUM
  ENTERPRISE
}

enum AppPlanType {
  DEFAULT
  CUSTOM
}

enum AppPlanInterval {
  EVERY_30_DAYS
  ANNUAL
}
